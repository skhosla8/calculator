{"version":3,"sources":["ButtonField.js","App.js","index.js"],"names":["ButtonField","props","className","id","onClick","clear","appendNegativeSign","flush","getOperands","value","getCalculation","App","useState","currentOperand","setCurrentOperand","prevOperand","setPrevOperand","operator","setOperator","nextOperand","setNextOperand","equalSign","setEqualSign","updatedValue","useRef","updatedNextValue","useEffect","compute","sum","Number","toString","length","toFixed","innerHTML","includes","current","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.4d20dd98.chunk.js","sourcesContent":["import React from 'react';\n\nfunction ButtonField(props) {\n    return (\n        <div className=\"button-field\">\n            <button id=\"clear\" onClick={() => { props.clear() }}>AC</button>\n            <button className=\"entity\" onClick={() => { props.appendNegativeSign('-') }}>±</button>\n            <button className=\"operator entity\" id=\"divide\" onClick={() => { props.flush('÷') }}>÷</button>\n\n            <button id=\"seven\" onClick={() => { props.getOperands('7') }}>7</button>\n            <button id=\"eight\" onClick={() => { props.getOperands('8') }}>8</button>\n            <button id=\"nine\" onClick={() => { props.getOperands('9') }}>9</button>\n            <button className=\"operator entity\" id=\"multiply\" onClick={() => { props.flush('×') }}>×</button>\n\n            <button id=\"four\" onClick={() => { props.getOperands('4') }}>4</button>\n            <button id=\"five\" onClick={() => { props.getOperands('5') }}>5</button>\n            <button id=\"six\" onClick={() => { props.getOperands('6') }}>6</button>\n            <button className=\"operator entity\" id=\"subtract\" onClick={() => { props.flush('−') }}>-</button>\n\n            <button id=\"one\" onClick={() => { props.getOperands('1') }}>1</button>\n            <button id=\"two\" onClick={() => { props.getOperands('2') }}>2</button>\n            <button id=\"three\" onClick={() => { props.getOperands('3') }}>3</button>\n            <button className=\"operator entity\" id=\"add\" onClick={() => { props.flush('+') }}>+</button>\n\n            <button className=\"entity\" id=\"decimal\" onClick={() => { props.getOperands('.') }}>.</button>\n            <button id=\"zero\" value=\"0\" onClick={() => { props.getOperands('0') }}>0</button>\n            <button className=\"operator entity\" id=\"equals\" onClick={() => props.getCalculation('=')}>&#61;</button>\n        </div>\n    )\n};\n\nexport default ButtonField;","import React, { useState, useEffect, useRef } from 'react';\nimport './App.css';\nimport ButtonField from './ButtonField';\n\nfunction App() {\n    const [currentOperand, setCurrentOperand] = useState(null);\n    const [prevOperand, setPrevOperand] = useState(null);\n    const [operator, setOperator] = useState(null);\n    const [nextOperand, setNextOperand] = useState(null);\n    const [equalSign, setEqualSign] = useState(null);\n\n    const updatedValue = useRef('0');\n    const updatedNextValue = useRef('0');\n\n    useEffect(() => {\n        setCurrentOperand('0');\n    }, []);\n\n    const appendNegativeSign = (innerHTML) => {\n        if (innerHTML === '-' && currentOperand.includes('-')) return;\n        if (updatedValue.current === '0') updatedValue.current = '';\n        if (updatedNextValue.current === '0') updatedNextValue.current = '';\n\n        if (equalSign) {\n            setCurrentOperand(innerHTML + currentOperand);\n        } else if (operator) {\n            updatedNextValue.current = innerHTML + updatedNextValue.current;\n            setCurrentOperand(updatedNextValue.current);\n            setNextOperand(updatedNextValue.current);\n        } else {\n            updatedValue.current = innerHTML + updatedValue.current;\n            setCurrentOperand(updatedValue.current);\n            setPrevOperand(updatedValue.current);\n        }\n    }\n\n    const getOperands = (innerHTML) => {\n        if (innerHTML === '.' && currentOperand.includes('.')) return;\n        if (updatedValue.current === '0') updatedValue.current = '';\n        if (updatedNextValue.current === '0') updatedNextValue.current = '';\n\n        if (operator) {\n            updatedNextValue.current += innerHTML;\n            setCurrentOperand(updatedNextValue.current);\n            setNextOperand(updatedNextValue.current);\n        } else {\n            updatedValue.current += innerHTML;\n            setCurrentOperand(updatedValue.current);\n            setPrevOperand(updatedValue.current);\n        }\n    }\n\n    const flush = (innerHTML) => {\n        if (!prevOperand) return;\n\n        if (nextOperand) {\n            equalSign ? setPrevOperand(currentOperand) : setPrevOperand(compute);\n            updatedNextValue.current = '';\n            setNextOperand(null);\n            setEqualSign(null);\n        }\n\n        setOperator(innerHTML);\n        setCurrentOperand(innerHTML);\n    }\n\n    const compute = () => {\n        let sum;\n\n        switch (operator) {\n            case '÷':\n                sum = Number(prevOperand) / Number(nextOperand);\n                break;\n            case '×':\n                sum = Number(prevOperand) * Number(nextOperand);\n                break;\n            case '−':\n                sum = Number(prevOperand) - Number(nextOperand);\n                break;\n            case '+':\n                sum = Number(prevOperand) + Number(nextOperand);\n                break;\n            default:\n                return;\n        }\n\n        if (sum.toString().length > 13) {\n            sum = sum.toFixed(11);\n        }\n\n        return sum.toString();\n    }\n\n    const getCalculation = () => {\n        if (!nextOperand) return;\n\n        setEqualSign('=');\n        compute();\n        setCurrentOperand(compute);\n    }\n\n    const clear = () => {\n        setCurrentOperand('0');\n        setPrevOperand(null);\n        setOperator(null);\n        setNextOperand(null);\n        setEqualSign(null);\n        updatedValue.current = '';\n        updatedNextValue.current = '';\n    }\n\n    return (\n        <div className=\"container\">\n            <div className=\"calculator\">\n                <div className=\"output-screen\">\n                    <div id=\"prev-input\">\n                        <span id='placeholder'>*</span>\n                        {prevOperand}{operator}{nextOperand}{equalSign}\n                    </div>\n                    <div id=\"display\">\n                        {currentOperand}\n                    </div>\n                </div>\n                <ButtonField\n                    appendNegativeSign={appendNegativeSign}\n                    getOperands={getOperands}\n                    flush={flush}\n                    compute={compute}\n                    getCalculation={getCalculation}\n                    clear={clear}\n                />\n            </div>\n        </div>\n    )\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}